# solution for Assignment 1
# Trigram Hidden Markov Model

from collections import defaultdict

def emission_counts(counts_file):
    """ This function reads the counts files generated by the helper file count_freqs.py and calculates the emission parameters """
    word_tag_counts = {}
    tag_counts = defaultdict(int) # This will store the cumulative tag counts
    for line in counts_file:
        parts = line.strip().split()
        if parts[1] == 'WORDTAG':
            word_tag_count = parts[0]
            tag = parts[2]
            word = parts[3]
            tag_counts[tag] += int(word_tag_count)
            if word_tag_counts.get(word):
               word_tag_counts[word][tag] = int(word_tag_count)
            else:
                word_tag_counts[word] = {tag : int(word_tag_count)}
    return word_tag_counts, tag_counts

def get_emission(word, tag, word_tag_counts, tag_counts):
    word_tag_count = word_tag_counts[word][tag] # assumes word exists and has been seen
    total_tag_count = tag_counts[tag]
    return word_tag_count * 1.0 / total_tag_count

def replace_infrequent(word_tag_count):
    """ Finds the least frequent words where total count < 5, and replaces those words in the training data with the symbol _RARE_. Saves the edited training file as gene.train2. """
    # infrequent_words = [] # a list to store the infrequent words
    # implement this as dict to speed up the lookup - 2/21/14
    infrequent_words = {}
    for word, tag_dict in word_tag_count.iteritems():
        total_word_count = sum([x for x in tag_dict.values()])
        if total_word_count < 5:
            infrequent_words[word] = None
    print len(infrequent_words)
    f = open('gene.train')
    g = open('gene.train2', 'w')
    for line in f:
        parts = line.split()
        # parts[0] contains the word of the word-count pair (if the line is a word-count pair)
        if len(parts) > 1 and parts[0] in infrequent_words:
            new_line = '_RARE_ ' + parts[1]
        else:
            new_line = line
        g.write(new_line)
    g.close()
    f.close()


if __name__ == '__main__':
    counts_file = sys.argv[1]
    word_tag_counts, tag_counts = emission_counts(sys.argv[1])

