# solution for Assignment 1
# Trigram Hidden Markov Model

from collections import defaultdict

def emission_counts(counts_filename):
    """
    This function reads the counts files generated by the helper file count_freqs.py
    and calculates the emission parameters
    """
    word_tag_counts = {}
    counts_file = open(counts_filename)
    tag_counts = defaultdict(int) # This will store the cumulative tag counts
    for line in counts_file:
        parts = line.split()
        if parts[1] == 'WORDTAG':
            word_tag_count = parts[0]
            tag = parts[2]
            word = parts[3]
            tag_counts[tag] += int(word_tag_count)
            if word_tag_counts.get(word):
               word_tag_counts[word][tag] = int(word_tag_count)
            else:
               word_tag_counts[word] = {tag : int(word_tag_count)}
    return word_tag_counts, tag_counts

def get_emission(word, tag, word_tag_counts, total_tag_count):
    tag_dict = word_tag_counts.get(word)
    if not tag_dict:
        tag_dict = word_tag_counts.get('_RARE_') # if word is rare or unseen, use _RARE_
    word_tag_count = tag_dict.get(tag, 0) 
    return word_tag_count * 1.0 / total_tag_count

def replace_infrequent(word_tag_counts):
    """ 
    Finds the least frequent words where total count < 5, 
    and replaces those words in the training data with the symbol _RARE_. 
    Saves the edited training file as gene.train2.
    """
    # infrequent_words = [] # a list to store the infrequent words
    # implement this as dict to speed up the lookup - 2/21/14
    infrequent_words = {}
    for word, tag_dict in word_tag_counts.iteritems():
        total_word_count = sum(tag_dict.values())
        if total_word_count < 5:
            infrequent_words[word] = None
    print len(infrequent_words)
    f = open('gene.train')
    g = open('gene.train2', 'w')
    for line in f:
        parts = line.split()
        # parts[0] contains the word of the word-count pair (if the line is a word-count pair)
        if len(parts) > 1 and parts[0] in infrequent_words:
            new_line = '_RARE_ ' + parts[1] + '\n'
        else:
            new_line = line
        g.write(new_line)
    g.close()
    f.close()
    return infrequent_words

def tagger(word, word_tag_counts, tag_counts):
    """
    For a given word, find the tag that maximizes the emission parameter. If word doesn't exist, use _RARE_.
    """
    max_tag = None
    max_e = 0  # max_e will hold the maximum emission parameter over all seen tags
    for tag, total_tag_count in tag_counts.items():
        e = get_emission(word, tag, word_tag_counts, total_tag_count)
        if e >= max_e:
            max_tag = tag
            max_e = e 
    return max_tag

def main(infrequent_words, word_tag_counts, tag_counts):
    """ Output the most likely tag for each word """
    devfile = open('gene.dev')
    outputfile = open('gene.dev.p1.out', 'w')
    for line in devfile:
        word = line.strip() # devfile contains one word per line or empty line
        if word:
            tag = tagger(word, word_tag_counts, tag_counts)
            outputfile.write(word + ' ' + tag + '\n')
        else:
            outputfile.write('\n')
    devfile.close()
    outputfile.close() # consider using context manager for files
